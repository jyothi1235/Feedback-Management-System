{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "63ae0b79-9db0-47d0-8f95-fe530ef49a27",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Receiver 'dkjnvk' added.\n",
      "User 'skjknsr' added.\n"
     ]
    }
   ],
   "source": [
    "# Cell 1: Imports and Setup\n",
    "import tkinter as tk\n",
    "from tkinter import ttk, messagebox\n",
    "from datetime import datetime\n",
    "import json\n",
    "import os\n",
    "\n",
    "# Cell 2: FeedbackManager Class\n",
    "class FeedbackManager:\n",
    "    def __init__(self):\n",
    "        self.file_path = \"feedbacks.json\"\n",
    "\n",
    "    def load_feedbacks(self):\n",
    "        if not os.path.exists(self.file_path):\n",
    "            return []\n",
    "        try:\n",
    "            with open(self.file_path, \"r\") as f:\n",
    "                return json.load(f)\n",
    "        except json.JSONDecodeError:\n",
    "            return []\n",
    "\n",
    "    def save_feedbacks(self, feedbacks):\n",
    "        with open(self.file_path, \"w\") as f:\n",
    "            json.dump(feedbacks, f, indent=4)\n",
    "\n",
    "    def add_feedback(self, name, rating, comment, subject, compulsory_answers):\n",
    "        date = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n",
    "        feedback = {\n",
    "            \"date\": date, \"name\": name, \"rating\": rating,\n",
    "            \"comment\": comment, \"subject\": subject,\n",
    "            \"answers\": compulsory_answers\n",
    "        }\n",
    "        feedbacks = self.load_feedbacks()\n",
    "        feedbacks.append(feedback)\n",
    "        self.save_feedbacks(feedbacks)\n",
    "\n",
    "    def delete_feedback(self, date, name, rating, comment):\n",
    "        feedbacks = self.load_feedbacks()\n",
    "        new_feedbacks = [fb for fb in feedbacks if not (\n",
    "            fb['date'] == date and fb['name'] == name and \n",
    "            fb['rating'] == rating and fb['comment'] == comment\n",
    "        )]\n",
    "        self.save_feedbacks(new_feedbacks)\n",
    "\n",
    "# Cell 3: SubjectManager Class\n",
    "class SubjectManager:\n",
    "    def __init__(self):\n",
    "        self.file_path = \"subjects.json\"\n",
    "\n",
    "    def load_subjects(self):\n",
    "        if not os.path.exists(self.file_path):\n",
    "            return []\n",
    "        try:\n",
    "            with open(self.file_path, \"r\") as f:\n",
    "                return json.load(f)\n",
    "        except json.JSONDecodeError:\n",
    "            return []\n",
    "\n",
    "    def save_subjects(self, subjects):\n",
    "        with open(self.file_path, \"w\") as f:\n",
    "            json.dump(subjects, f, indent=4)\n",
    "\n",
    "    def add_subject(self, subject):\n",
    "        subjects = self.load_subjects()\n",
    "        if subject not in subjects:\n",
    "            subjects.append(subject)\n",
    "            self.save_subjects(subjects)\n",
    "\n",
    "# Cell 4: UserManager Class\n",
    "class UserManager:\n",
    "    def __init__(self):\n",
    "        self.users = []\n",
    "        self.receivers = []\n",
    "\n",
    "    def modify_users(self, choice, name):\n",
    "        if choice == '1':\n",
    "            if name and name not in self.users:\n",
    "                self.users.append(name)\n",
    "                print(f\"User '{name}' added.\")\n",
    "            else:\n",
    "                print(f\"User '{name}' already exists or invalid.\")\n",
    "        elif choice == '0':\n",
    "            if name in self.users:\n",
    "                self.users.remove(name)\n",
    "                print(f\"User '{name}' removed.\")\n",
    "            else:\n",
    "                print(f\"User '{name}' not found.\")\n",
    "\n",
    "    def modify_receivers(self, choice, name):\n",
    "        if choice == '1':\n",
    "            if name and name not in self.receivers:\n",
    "                self.receivers.append(name)\n",
    "                print(f\"Receiver '{name}' added.\")\n",
    "            else:\n",
    "                print(f\"Receiver '{name}' already exists or invalid.\")\n",
    "        elif choice == '0':\n",
    "            if name in self.receivers:\n",
    "                self.receivers.remove(name)\n",
    "                print(f\"Receiver '{name}' removed.\")\n",
    "            else:\n",
    "                print(f\"Receiver '{name}' not found.\")\n",
    "\n",
    "# Cell 5: FeedbackApp Class\n",
    "class FeedbackApp:\n",
    "    def __init__(self, root, role):\n",
    "        self.root = root\n",
    "        self.root.title(\"Feedback Management System\")\n",
    "        self.root.geometry(\"800x600\")\n",
    "        self.root.configure(padx=10, pady=10)\n",
    "\n",
    "        self.role = role\n",
    "        self.feedback_mgr = FeedbackManager()\n",
    "        self.subject_mgr = SubjectManager()\n",
    "        self.user_mgr = UserManager()\n",
    "\n",
    "        self.style = ttk.Style()\n",
    "        self.available_themes = self.style.theme_names()\n",
    "        self.current_theme = tk.StringVar(value=self.style.theme_use())\n",
    "\n",
    "        theme_frame = ttk.Frame(root)\n",
    "        theme_frame.pack(fill='x', pady=5)\n",
    "        ttk.Label(theme_frame, text=\"Select Theme:\").pack(side='left', padx=5)\n",
    "\n",
    "        self.theme_menu = ttk.OptionMenu(\n",
    "            theme_frame, self.current_theme,\n",
    "            self.style.theme_use(),\n",
    "            *self.available_themes,\n",
    "            command=self.change_theme\n",
    "        )\n",
    "        self.theme_menu.pack(side='left')\n",
    "\n",
    "        self.tab_control = ttk.Notebook(root)\n",
    "        self.setup_tabs()\n",
    "        self.tab_control.pack(expand=1, fill=\"both\", padx=5, pady=5)\n",
    "\n",
    "        logout_frame = ttk.Frame(root)\n",
    "        logout_frame.pack(fill='x', side='bottom')\n",
    "        ttk.Button(logout_frame, text=\"Logout\", command=self.logout).pack(side='right', padx=10, pady=10)\n",
    "\n",
    "    def logout(self):\n",
    "        self.root.destroy()\n",
    "        show_login_dialog()\n",
    "\n",
    "    def change_theme(self, selected_theme):\n",
    "        try:\n",
    "            self.style.theme_use(selected_theme)\n",
    "        except tk.TclError:\n",
    "            messagebox.showerror(\"Theme Error\", f\"Theme '{selected_theme}' is not available.\")\n",
    "\n",
    "    def setup_tabs(self):\n",
    "        if self.role == \"Student\":\n",
    "            self.create_feedback_tab()\n",
    "        else:\n",
    "            self.create_view_tab()\n",
    "            self.create_user_tab()\n",
    "            self.create_receiver_tab()\n",
    "            self.create_subject_tab()\n",
    "            self.create_subject_view_tab()\n",
    "\n",
    "    def create_feedback_tab(self):\n",
    "        tab = ttk.Frame(self.tab_control)\n",
    "        self.tab_control.add(tab, text='Submit Feedback')\n",
    "\n",
    "        form_frame = ttk.Frame(tab, padding=20)\n",
    "        form_frame.pack(anchor='center')\n",
    "\n",
    "        ttk.Label(form_frame, text=\"Name:\").grid(row=0, column=0, sticky=\"e\", padx=5, pady=5)\n",
    "        self.name_entry = ttk.Entry(form_frame, width=40)\n",
    "        self.name_entry.grid(row=0, column=1, pady=5)\n",
    "\n",
    "        ttk.Label(form_frame, text=\"Subject:\").grid(row=1, column=0, sticky=\"e\", padx=5, pady=5)\n",
    "        self.subject_var = tk.StringVar()\n",
    "        self.subject_menu = ttk.Combobox(form_frame, textvariable=self.subject_var, values=self.subject_mgr.load_subjects())\n",
    "        self.subject_menu.grid(row=1, column=1, pady=5)\n",
    "\n",
    "        ttk.Label(form_frame, text=\"Rating (0-100):\").grid(row=2, column=0, sticky=\"e\", padx=5, pady=5)\n",
    "        self.rating_entry = ttk.Entry(form_frame, width=40)\n",
    "        self.rating_entry.grid(row=2, column=1, pady=5)\n",
    "\n",
    "        ttk.Label(form_frame, text=\"Comment:\").grid(row=3, column=0, sticky=\"e\", padx=5, pady=5)\n",
    "        self.comment_entry = ttk.Entry(form_frame, width=40)\n",
    "        self.comment_entry.grid(row=3, column=1, pady=5)\n",
    "\n",
    "        ttk.Label(form_frame, text=\"Did the faculty arrive on time?\").grid(row=4, column=0, columnspan=2, sticky='w')\n",
    "        self.q1 = tk.BooleanVar()\n",
    "        ttk.Checkbutton(form_frame, variable=self.q1).grid(row=4, column=1, sticky='e')\n",
    "\n",
    "        ttk.Label(form_frame, text=\"Was the session interactive?\").grid(row=5, column=0, columnspan=2, sticky='w')\n",
    "        self.q2 = tk.BooleanVar()\n",
    "        ttk.Checkbutton(form_frame, variable=self.q2).grid(row=5, column=1, sticky='e')\n",
    "\n",
    "        ttk.Button(form_frame, text=\"Submit Feedback\", command=self.submit_feedback).grid(row=6, column=0, columnspan=2, pady=15)\n",
    "\n",
    "    def create_view_tab(self):\n",
    "        tab = ttk.Frame(self.tab_control)\n",
    "        self.tab_control.add(tab, text='View Feedbacks')\n",
    "\n",
    "        top_frame = ttk.Frame(tab, padding=10)\n",
    "        top_frame.pack(fill='x')\n",
    "\n",
    "        ttk.Button(top_frame, text=\"Load Feedbacks\", command=self.load_feedbacks).pack(side='left', padx=5)\n",
    "\n",
    "        self.tree = ttk.Treeview(tab, columns=(\"Date\", \"Name\", \"Rating\", \"Comment\", \"Subject\"), show='headings', height=15)\n",
    "        for col in self.tree['columns']:\n",
    "            self.tree.heading(col, text=col)\n",
    "            self.tree.column(col, anchor=\"center\")\n",
    "        self.tree.pack(expand=True, fill='both', padx=10, pady=10)\n",
    "\n",
    "        ttk.Button(tab, text=\"Delete Selected\", command=self.delete_feedback).pack(pady=10)\n",
    "\n",
    "    def create_user_tab(self):\n",
    "        tab = ttk.Frame(self.tab_control)\n",
    "        self.tab_control.add(tab, text='Manage Users')\n",
    "        self.manage_entity(tab, \"User\", self.user_mgr.modify_users)\n",
    "\n",
    "    def create_receiver_tab(self):\n",
    "        tab = ttk.Frame(self.tab_control)\n",
    "        self.tab_control.add(tab, text='Manage Receivers')\n",
    "        self.manage_entity(tab, \"Receiver\", self.user_mgr.modify_receivers)\n",
    "\n",
    "    def create_subject_tab(self):\n",
    "        tab = ttk.Frame(self.tab_control)\n",
    "        self.tab_control.add(tab, text='Manage Subjects')\n",
    "        frame = ttk.Frame(tab, padding=20)\n",
    "        frame.pack()\n",
    "\n",
    "        ttk.Label(frame, text=\"Subject Name:\").grid(row=0, column=0, padx=5, pady=5)\n",
    "        self.subject_entry = ttk.Entry(frame, width=30)\n",
    "        self.subject_entry.grid(row=0, column=1, padx=5, pady=5)\n",
    "\n",
    "        ttk.Button(frame, text=\"Add Subject\", command=self.add_subject).grid(row=1, column=0, columnspan=2, pady=10)\n",
    "\n",
    "    def create_subject_view_tab(self):\n",
    "        tab = ttk.Frame(self.tab_control)\n",
    "        self.tab_control.add(tab, text='View Subjects')\n",
    "        subjects = self.subject_mgr.load_subjects()\n",
    "        text = \"\\n\".join(subjects) if subjects else \"No subjects added.\"\n",
    "        ttk.Label(tab, text=text, padding=20).pack()\n",
    "\n",
    "    def manage_entity(self, tab, role, modify_func):\n",
    "        frame = ttk.Frame(tab, padding=20)\n",
    "        frame.pack()\n",
    "\n",
    "        ttk.Label(frame, text=f\"{role} Name:\").grid(row=0, column=0, padx=5, pady=5)\n",
    "        name_entry = ttk.Entry(frame, width=30)\n",
    "        name_entry.grid(row=0, column=1, padx=5, pady=5)\n",
    "\n",
    "        def add_entity():\n",
    "            name = name_entry.get().strip()\n",
    "            if name:\n",
    "                modify_func('1', name)\n",
    "                messagebox.showinfo(f\"{role} Added\", f\"{role} '{name}' added.\")\n",
    "                name_entry.delete(0, tk.END)\n",
    "            else:\n",
    "                messagebox.showerror(\"Error\", f\"Please enter {role.lower()} name.\")\n",
    "\n",
    "        def remove_entity():\n",
    "            name = name_entry.get().strip()\n",
    "            if name:\n",
    "                modify_func('0', name)\n",
    "                messagebox.showinfo(f\"{role} Removed\", f\"{role} '{name}' removed.\")\n",
    "                name_entry.delete(0, tk.END)\n",
    "            else:\n",
    "                messagebox.showerror(\"Error\", f\"Please enter {role.lower()} name.\")\n",
    "\n",
    "        ttk.Button(frame, text=f\"Add {role}\", command=add_entity).grid(row=1, column=0, pady=10)\n",
    "        ttk.Button(frame, text=f\"Remove {role}\", command=remove_entity).grid(row=1, column=1, pady=10)\n",
    "\n",
    "    def add_subject(self):\n",
    "        subject = self.subject_entry.get().strip()\n",
    "        if subject:\n",
    "            self.subject_mgr.add_subject(subject)\n",
    "            messagebox.showinfo(\"Subject Added\", f\"Subject '{subject}' added.\")\n",
    "            self.subject_entry.delete(0, tk.END)\n",
    "            if hasattr(self, 'subject_menu'):\n",
    "                self.subject_menu['values'] = self.subject_mgr.load_subjects()\n",
    "        else:\n",
    "            messagebox.showerror(\"Error\", \"Please enter a subject name.\")\n",
    "\n",
    "    def submit_feedback(self):\n",
    "        name = self.name_entry.get().strip()\n",
    "        subject = self.subject_var.get().strip()\n",
    "        rating = self.rating_entry.get().strip()\n",
    "        comment = self.comment_entry.get().strip()\n",
    "        q1 = self.q1.get()\n",
    "        q2 = self.q2.get()\n",
    "\n",
    "        if not name or not subject or not rating or not comment:\n",
    "            messagebox.showerror(\"Error\", \"All fields including subject must be filled.\")\n",
    "            return\n",
    "\n",
    "        try:\n",
    "            rating_val = int(rating)\n",
    "            if rating_val < 0 or rating_val > 100:\n",
    "                raise ValueError\n",
    "        except ValueError:\n",
    "            messagebox.showerror(\"Error\", \"Rating must be an integer between 0 and 100.\")\n",
    "            return\n",
    "\n",
    "        if not q1 or not q2:\n",
    "            messagebox.showerror(\"Error\", \"Please answer all compulsory questions.\")\n",
    "            return\n",
    "\n",
    "        answers = {\n",
    "            \"faculty_arrived_on_time\": q1,\n",
    "            \"session_interactive\": q2\n",
    "        }\n",
    "        self.feedback_mgr.add_feedback(name, rating_val, comment, subject, answers)\n",
    "        messagebox.showinfo(\"Feedback Submitted\", \"Thank you for your feedback!\")\n",
    "\n",
    "        self.name_entry.delete(0, tk.END)\n",
    "        self.rating_entry.delete(0, tk.END)\n",
    "        self.comment_entry.delete(0, tk.END)\n",
    "        self.q1.set(False)\n",
    "        self.q2.set(False)\n",
    "        self.subject_var.set('')\n",
    "\n",
    "    def load_feedbacks(self):\n",
    "        for item in self.tree.get_children():\n",
    "            self.tree.delete(item)\n",
    "\n",
    "        feedbacks = self.feedback_mgr.load_feedbacks()\n",
    "        if not feedbacks:\n",
    "            messagebox.showinfo(\"No Feedback\", \"No feedback entries found.\")\n",
    "            return\n",
    "\n",
    "        for fb in feedbacks:\n",
    "            date = fb.get('date', '')\n",
    "            name = fb.get('name', '')\n",
    "            rating = fb.get('rating', '')\n",
    "            comment = fb.get('comment', '')\n",
    "            subject = fb.get('subject', '')\n",
    "            self.tree.insert('', 'end', values=(date, name, rating, comment, subject))\n",
    "\n",
    "    def delete_feedback(self):\n",
    "        selected = self.tree.selection()\n",
    "        if not selected:\n",
    "            messagebox.showerror(\"Error\", \"Please select a feedback to delete.\")\n",
    "            return\n",
    "\n",
    "        confirm = messagebox.askyesno(\"Confirm Delete\", \"Are you sure you want to delete the selected feedback?\")\n",
    "        if not confirm:\n",
    "            return\n",
    "\n",
    "        for item in selected:\n",
    "            values = self.tree.item(item, 'values')\n",
    "            date, name, rating, comment, _ = values\n",
    "            self.feedback_mgr.delete_feedback(date, name, rating, comment)\n",
    "            self.tree.delete(item)\n",
    "\n",
    "# Cell 6: Login Functions\n",
    "def login_action():\n",
    "    username = username_entry.get().strip()\n",
    "    password = password_entry.get().strip()\n",
    "    role = role_var.get()\n",
    "\n",
    "    if (username == \"admin\" and password == \"admin\" and role == \"Admin\") or \\\n",
    "       (username == \"student\" and password == \"student\" and role == \"Student\"):\n",
    "        login_root.destroy()\n",
    "        root = tk.Tk()\n",
    "        app = FeedbackApp(root, role)\n",
    "        root.mainloop()\n",
    "    else:\n",
    "        messagebox.showerror(\"Invalid Credentials\", \"Username, password or role is incorrect.\")\n",
    "\n",
    "def show_login_dialog():\n",
    "    global login_root, username_entry, password_entry, role_var\n",
    "\n",
    "    login_root = tk.Tk()\n",
    "    login_root.title(\"Login\")\n",
    "    login_root.geometry(\"300x220\")\n",
    "    login_root.configure(padx=20, pady=20)\n",
    "\n",
    "    ttk.Label(login_root, text=\"Username:\").pack(anchor='w', pady=5)\n",
    "    username_entry = ttk.Entry(login_root)\n",
    "    username_entry.pack(fill='x', pady=5)\n",
    "\n",
    "    ttk.Label(login_root, text=\"Password:\").pack(anchor='w', pady=5)\n",
    "    password_entry = ttk.Entry(login_root, show=\"*\")\n",
    "    password_entry.pack(fill='x', pady=5)\n",
    "\n",
    "    ttk.Label(login_root, text=\"Role:\").pack(anchor='w', pady=5)\n",
    "    role_var = tk.StringVar(value=\"Admin\")\n",
    "    ttk.Radiobutton(login_root, text=\"Admin\", variable=role_var, value=\"Admin\").pack(anchor='w')\n",
    "    ttk.Radiobutton(login_root, text=\"Student\", variable=role_var, value=\"Student\").pack(anchor='w')\n",
    "\n",
    "    ttk.Button(login_root, text=\"Login\", command=login_action).pack(pady=15)\n",
    "\n",
    "    login_root.mainloop()\n",
    "\n",
    "# Cell 7: Start the App\n",
    "show_login_dialog()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "32ffb966-853a-4516-9ca8-94cd663bc9d9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
